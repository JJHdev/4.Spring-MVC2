1. Bean Validation 소개
  -. 검증코드를 매번 작성하는게 번거로워서 만들어진게 Bean Validation 이다. 
  -. 어노테이션을 이용한 유효성검사

2. Bean Validation 시작
  -. 	implementation 'org.springframework.boot:spring-boot-starter-validation' 과 같이 설정을 추가해야한다.
    @NotNull(groups = UpdateCheck.class) //수정 요구사항 추가
    private Long id;
    @NotBlank(groups = {SaveCheck.class, UpdateCheck.class})
    private String itemName;
    @NotNull(groups = {SaveCheck.class, UpdateCheck.class})
    @Range(min = 1000, max = 1000000, groups = {SaveCheck.class, UpdateCheck.class})
    private Integer price;
    @NotNull(groups = {SaveCheck.class, UpdateCheck.class})
    @Max(value = 9999, groups = {SaveCheck.class})
    private Integer quantity;


    @Test
    void beanValidation() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();

        Item item = new Item();
        item.setItemName(" "); //공백
        item.setPrice(0);
        item.setQuantity(10000);

        Set<ConstraintViolation<Item>> violations = validator.validate(item);
        for (ConstraintViolation<Item> violation : violations) {
            System.out.println("violation = " + violation);
            System.out.println("violation = " + violation.getMessage());
        }

    }
  -. 과 같이 어노테이션으로 유효성 검사를 할수 있다. (메시지 내용은 기본적으로 스프링에 저장되어있는 값을 사용한다.)

3. Bean Validation 스프링 적용
  -. 

4. Bean Validation 에러 코드
5. Bean Validation 오브젝트 오류
6. Bean Validation 수정에 적용
7. Bean Validation 한계
8. Bean Validation group
9. Form 전송 객체 분리
10. Bean Validation - HTTP 메시지 컨버터
