1. Bean Validation 소개
  -. 검증코드를 매번 작성하는게 번거로워서 만들어진게 Bean Validation 이다. 
  -. 어노테이션을 이용한 유효성검사

2. Bean Validation 시작
  -. 	implementation 'org.springframework.boot:spring-boot-starter-validation' 과 같이 설정을 추가해야한다.

    @NotNull(groups = UpdateCheck.class) //수정 요구사항 추가
    private Long id;
    @NotBlank(groups = {SaveCheck.class, UpdateCheck.class})
    private String itemName;
    @NotNull(groups = {SaveCheck.class, UpdateCheck.class})
    @Range(min = 1000, max = 1000000, groups = {SaveCheck.class, UpdateCheck.class})
    private Integer price;
    @NotNull(groups = {SaveCheck.class, UpdateCheck.class})
    @Max(value = 9999, groups = {SaveCheck.class})
    private Integer quantity;


    @Test
    void beanValidation() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();

        Item item = new Item();
        item.setItemName(" "); //공백
        item.setPrice(0);
        item.setQuantity(10000);

        Set<ConstraintViolation<Item>> violations = validator.validate(item);
        for (ConstraintViolation<Item> violation : violations) {
            System.out.println("violation = " + violation);
            System.out.println("violation = " + violation.getMessage());
        }

    }
  -. 과 같이 어노테이션으로 유효성 검사를 할수 있다. (메시지 내용은 기본적으로 스프링에 저장되어있는 값을 사용한다.)

3. Bean Validation 스프링 적용
  -. private final ItemValidator itemValidator;  
     itemValidator.validate(item, bindingResult); 
     이것이없어도 아래와 같은 검증이 바로 가능하다. 그 이유로는 implementation 'org.springframework.boot:spring-boot-starter-validation' 이것을 넣으면
     자동적으로 LocalValidatorFactoryBean을 글로벌 빈으로 등록하기 때문이다.

  -. @Validated 가 있으면 검증을 할려고하는데 validator를 찾을려고한다. 그래서 

  -. LocalValidatorFactoryBean or private final ItemValidator itemValidator;    둘중 하나 로 사용할 validator를 찾아서 검증한다.
                                  itemValidator.validate(item, bindingResult); 

  -. 유효성을 검사할때에 아래와 같은 2가지 방법이 있다.
    @NotBlank
    private String itemName;

    @NotNull
    @Range(min = 1000, max = 1000000)
    private Integer price;

    @NotNull
    @Max(value = 9999)
    private Integer quantity;
-----------------------------------------
    @Component
    public class ItemValidator implements Validator {
    
        @Override
        public boolean supports(Class<?> clazz) {
            return Item.class.isAssignableFrom(clazz);
        }
    
        @Override
        public void validate(Object target, Errors errors) {
            Item item = (Item) target;
    
            if (!StringUtils.hasText(item.getItemName())) {
                errors.rejectValue("itemName", "required");
            }
            if (item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() > 1000000) {
                errors.rejectValue("price", "range", new Object[]{1000, 10000000}, null);
            }
            if (item.getQuantity() == null || item.getQuantity() >= 9999) {
                errors.rejectValue("quantity", "max", new Object[]{9999}, null);
            }
    
            //특정 필드가 아닌 복합 룰 검증
            if (item.getPrice() != null && item.getQuantity() != null) {
                int resultPrice = item.getPrice() * item.getQuantity();
                if (resultPrice < 10000) {
                    errors.reject("totalPriceMin", new Object[]{10000, resultPrice}, null);
                }
            }
        }
    }
    

  -. fieldErrors, objectErrors 두개의 에러를 만들고 bindingResult에 담아서 보낸다.

    //검증에 실패하면 다시 입력 폼으로
    if (bindingResult.hasErrors()) {
        log.info("errors={} ", bindingResult);
        return "validation/v2/addForm";
    }

  -. 글로벌벨리데이터가 있으면 그것을 사용하고 없으면 LocalValidatorFactoryBean이것을 사용한다.

4. Bean Validation 에러 코드
  -. errors.properties 에 있는 메세지를 찾아서 넣는데 어노테이션이름 기준으로 넣는다.
        @NotBlank > NotBlank.item.itemName 와 같이 아까 4단계로 순서대로 호출된다.

5. Bean Validation 오브젝트 오류
  -. 오브젝트 오류는 ScriptAssert 을 이용해서 만들수 있지만, 제약조건이 너무 많다. *DB데이터 와 같이 유효성검사 하는등)
  -. 그리하여 그전에 실행한

    //특정 필드가 아닌 복합 룰 검증
    if (item.getPrice() != null && item.getQuantity() != null) {
        int resultPrice = item.getPrice() * item.getQuantity();
        if (resultPrice < 10000) {
            bindingResult.reject("totalPriceMin", new Object[]{10000, resultPrice}, null);
        }
    }

  -. 위와 같은 방식을 추천한다.

6. Bean Validation 수정에 적용
  -. 등록에서 사용했던 방식과 같은 방식으로 수정에 적용하면 된다.

7. Bean Validation 한계
  -. 등록과 수정에 다른 유효성검사를 적용할수 없다.

8. Bean Validation group
  -. 7번의 한계는 아래와 같은 방법으로 해결이 가능하다.
    -. Bean Validation group
      -. @Validated(SaveCheck.class) @ModelAttribute Item item, BindingResult bindingResult
      -.  @NotNull(groups = UpdateCheck.class) //수정 요구사항 추가
          private Long id;

          @NotBlank(groups = {SaveCheck.class, UpdateCheck.class})
          private String itemName;
      -. 인터페이스 SaveCheck , UpdateCheck 를 만든다.
      -. 실제로 groups를 잘 사용하지 않는데 아래와 같은 방식을 사용한다. 위와 같은 방식은 너무 복잡하고 어렵다.

    -. 저장용Form DTO, 수정용form DTO 따로 만든다.


9. Form 전송 객체 분리
  -. 

10. Bean Validation - HTTP 메시지 컨버터
  -. 





