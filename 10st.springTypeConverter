1. 스프링타입 컨버터 소개
  -. 문자를 숫자로, 숫자를문자로 변환 하는경우가 많다.
  -. request.getPatameter는 모두 문자로 처리된다. -> @requesetParam Integer param 으로 int타입으로 바로 받을수 있다.
  -. Http 쿼리 스트링으로 전달하는것은 모두다 문자이다. 위에처럼 스프링이 내부에서 변환해서 넣어줄수 있다.
  -. 개발자가 새로운 타입을 만들어서 변환하고싶을 경우 가능하다.
  -. interface Converter<S,T> {T convert(S source);} 가능하다.

2. 타입 컨버터
public class StringToIntegerConverter implements Converter<String, Integer> {

    @Override
    public Integer convert(String source) {
        log.info("convert source={}", source);
        return Integer.valueOf(source);
    }
}
 와 같이 사용가능하다. (양방향을 사용할려면 양쪽으로 만들어줘야 한다.)

   -.  해당 기능은 아래와 같이 사용할수 있다.
       StringToIntegerConverter converter = new StringToIntegerConverter();
        Integer result = converter.convert("10");
        assertThat(result).isEqualTo(10);

2-2.  IP와 port를 변환하는 방식으로 사용할수있다.
public class IpPortToStringConverter implements Converter<IpPort, String> {
    @Override
    public String convert(IpPort source) {
        log.info("convert source={}", source);
        //IpPort 객체 -> "127.0.0.1:8080"
        return source.getIp() + ":" + source.getPort();
    }
}

  -. 타입컨버터는 위에처럼보면 사용하기 힘든기능같다. 그치만 효율적으로 사용할수있다.


  3. conversionService
    -.conversionService는 is? 가능한지와 컨버터 기능을 제공한다,
    -. 
    @Test
    void conversionService() {
        //등록
        DefaultConversionService conversionService = new DefaultConversionService();
        conversionService.addConverter(new StringToIntegerConverter());
        conversionService.addConverter(new IntegerToStringConverter());
        conversionService.addConverter(new StringToIpPortConverter());
        conversionService.addConverter(new IpPortToStringConverter());

        //사용
        assertThat(conversionService.convert("10", Integer.class)).isEqualTo(10);
        assertThat(conversionService.convert(10, String.class)).isEqualTo("10");

        IpPort ipPort = conversionService.convert("127.0.0.1:8080", IpPort.class);
        assertThat(ipPort).isEqualTo(new IpPort("127.0.0.1", 8080));

        String ipPortString = conversionService.convert(new IpPort("127.0.0.1", 8080), String.class);
        assertThat(ipPortString).isEqualTo("127.0.0.1:8080");

    }

  -. 위의 처럼 만든컨버터를 conversionService에 담아서 사용할수있다. 
  -. conversionService.convert(값, 반환타입);으로 사용 가능하다.
  -. 실제로 @ReqeustParam같은 스프링에서 타입컨버터를 많이용한다.
  -. 스프링에서는 사용하는쪽과 (conveterService), 등록하는 인터페이스(conveterRegistry) 서로 ISP인터페이스 분리원칙을 이용해서 많이 설계되어있다.


    
