1. 스프링타입 컨버터 소개
  -. 문자를 숫자로, 숫자를문자로 변환 하는경우가 많다.
  -. request.getPatameter는 모두 문자로 처리된다. -> @requesetParam Integer param 으로 int타입으로 바로 받을수 있다.
  -. Http 쿼리 스트링으로 전달하는것은 모두다 문자이다. 위에처럼 스프링이 내부에서 변환해서 넣어줄수 있다.
  -. 개발자가 새로운 타입을 만들어서 변환하고싶을 경우 가능하다.
  -. interface Converter<S,T> {T convert(S source);} 가능하다.

2. 타입 컨버터
public class StringToIntegerConverter implements Converter<String, Integer> {

    @Override
    public Integer convert(String source) {
        log.info("convert source={}", source);
        return Integer.valueOf(source);
    }
}
 와 같이 사용가능하다. (양방향을 사용할려면 양쪽으로 만들어줘야 한다.)

   -.  해당 기능은 아래와 같이 사용할수 있다.
       StringToIntegerConverter converter = new StringToIntegerConverter();
        Integer result = converter.convert("10");
        assertThat(result).isEqualTo(10);

2-2.  IP와 port를 변환하는 방식으로 사용할수있다.
public class IpPortToStringConverter implements Converter<IpPort, String> {
    @Override
    public String convert(IpPort source) {
        log.info("convert source={}", source);
        //IpPort 객체 -> "127.0.0.1:8080"
        return source.getIp() + ":" + source.getPort();
    }
}

  -. 타입컨버터는 위에처럼보면 사용하기 힘든기능같다. 그치만 효율적으로 사용할수있다.


  3. conversionService
    -.conversionService는 is? 가능한지와 컨버터 기능을 제공한다,
    -. 
    @Test
    void conversionService() {
        //등록
        DefaultConversionService conversionService = new DefaultConversionService();
        conversionService.addConverter(new StringToIntegerConverter());
        conversionService.addConverter(new IntegerToStringConverter());
        conversionService.addConverter(new StringToIpPortConverter());
        conversionService.addConverter(new IpPortToStringConverter());

        //사용
        assertThat(conversionService.convert("10", Integer.class)).isEqualTo(10);
        assertThat(conversionService.convert(10, String.class)).isEqualTo("10");

        IpPort ipPort = conversionService.convert("127.0.0.1:8080", IpPort.class);
        assertThat(ipPort).isEqualTo(new IpPort("127.0.0.1", 8080));

        String ipPortString = conversionService.convert(new IpPort("127.0.0.1", 8080), String.class);
        assertThat(ipPortString).isEqualTo("127.0.0.1:8080");

    }

  -. 위의 처럼 만든컨버터를 conversionService에 담아서 사용할수있다. 
  -. conversionService.convert(값, 반환타입);으로 사용 가능하다.
  -. 실제로 @ReqeustParam같은 스프링에서 타입컨버터를 많이용한다.
  -. 스프링에서는 사용하는쪽과 (conveterService), 등록하는 인터페이스(conveterRegistry) 서로 ISP인터페이스 분리원칙을 이용해서 많이 설계되어있다.

4. SpringConverter
  -. webMvcConfigurer에서 overide에서 addFomatter가 있다 이를 이용해서 내가 만든 컨버터를 등록할수있다.
  -. spring에서 converisonService를 등록하기위해 만들어준것.
   
@Override
    public void addFormatters(FormatterRegistry registry) {
        //주석처리 우선순위
//        registry.addConverter(new StringToIntegerConverter());
//        registry.addConverter(new IntegerToStringConverter());
        registry.addConverter(new StringToIpPortConverter());
        registry.addConverter(new IpPortToStringConverter());

        //추가
        registry.addFormatter(new MyNumberFormatter());
    }
  -. 해당 컨버터들은 컨트롤러에서 파라미터를 받을때 사용할수있다.
  -. 기존에 만든 StrintoInteger를 수행시 잘되었는데, 내가 만든것을 넣으면 내가 만든것들을 이용하게된다.
  -. (추가컨버터가 기존 컨버터보다 더 우선순위를 가지게 된것)

  사용예시
    @GetMapping("/ip-port")
    public String ipPort(@RequestParam IpPort ipPort) {
        System.out.println("ipPort IP = " + ipPort.getIp());
        System.out.println("ipPort PORT = " + ipPort.getPort());
        return "ok";
    }

  -. @ReqeustParam, @ModelAttribute, @PathValuable 등 다 적용이 된다.
  -. 실제로 @ReqeustParam 이것을 사용할때도 converseionService를 이용한다.


5. 뷰템플릿에 컨버전 서비스 적용하기.
  -.<li>${number}: <span th:text="${number}" ></span></li>
    <li>${{number}}: <span th:text="${{number}}" ></span></li>
    <li>${ipPort}: <span th:text="${ipPort}" ></span></li>
    <li>${{ipPort}}: <span th:text="${{ipPort}}" ></span></li>
  -. 위와 같이 ${{}} 두개를 사용할경우 스프링에서 자동으로 적용할수있는 컨버터를 사용한다.
  
  -. th:field <input type="text" th:field="*{ipPort}"><br/>
    th:value <input type="text" th:value="*{ipPort}">(보여주기 용도)<br/>
  -. 위와같이 field에 *{}를 사용해도 컨버터가 실행되는것을 확인할수있다. th:value는 안됨

6. 포맷터
  -. Converter는 입력과 출력타입에 제한이 없는, 범용타입변환기능을 제공한다.
  -. 숫자 1000을 1,000문자로 변환해서 넣는다던지, 날짜객체를 특정 포맷으로 한다던지, Locale등 현지화 정보를 사용할 경우 포맷터를 이용할수 있다.
  -. Formatter 는 문자에 특화되어있음 (객체 <-> 문자)

  -. 
@Slf4j
public class MyNumberFormatter implements Formatter<Number> {
    @Override
    public Number parse(String text, Locale locale) throws ParseException {
        log.info("text={}, locale={}", text, locale);
        //"1,000" -> 1000
        NumberFormat format = NumberFormat.getInstance(locale);
        return format.parse(text);
    }
    @Override
    public String print(Number object, Locale locale) {
        log.info("object={}, locale={}", object, locale);
        return NumberFormat.getInstance(locale).format(object);
    }
}

  -. parse은 "1,000" -> 1000으로 print는 반대로 출력하게 해준다.
  -. locale정보를 활용해서 나라마다 다른 숫자 퐷을 만들어준다.
    MyNumberFormatter formatter = new MyNumberFormatter();

    @Test
    void parse() throws ParseException {
        Number result = formatter.parse("1,000", Locale.KOREA);
        assertThat(result).isEqualTo(1000L); //Long 타입 주의
    }

    @Test
    void print() {
        String result = formatter.print(1000, Locale.KOREA);
        assertThat(result).isEqualTo("1,000");
    }
 로 사용할수 있다.

7. 포맷터를 지원하는 컨버전 서비스
  -. 컨버전 서비스에 포맷터를 추가하는 방법이 있는데, 이는 FormattingConversionService를 이용해야한다. (포맷터를 지원하는 컨버전 서비스)
  -. defaultFormattingConversionService를 이용해서 사용할수있다. 
  -. 해당 클래스는 포맷터와 컨버전을 둘다 등록할수있다.

    @Test
    void formattingConversionService() {
        DefaultFormattingConversionService conversionService = new DefaultFormattingConversionService();
        //컨버터 등록
        conversionService.addConverter(new StringToIpPortConverter());
        conversionService.addConverter(new IpPortToStringConverter());
        //포멧터 등록
        conversionService.addFormatter(new MyNumberFormatter());

        //컨버터 사용
        IpPort ipPort = conversionService.convert("127.0.0.1:8080", IpPort.class);
        assertThat(ipPort).isEqualTo(new IpPort("127.0.0.1", 8080));
        //포멧터 사용
        assertThat(conversionService.convert(1000, String.class)).isEqualTo("1,000");
        assertThat(conversionService.convert("1,000", Long.class)).isEqualTo(1000L);

    }
   과 같이 둘다 등록해서 사용할수 있다.

8. 포맷터 적용하기
  -. @Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addFormatters(FormatterRegistry registry) {
        //주석처리 우선순위
//        registry.addConverter(new StringToIntegerConverter());
//        registry.addConverter(new IntegerToStringConverter());
        registry.addConverter(new StringToIpPortConverter());
        registry.addConverter(new IpPortToStringConverter());

        //추가
        registry.addFormatter(new MyNumberFormatter());
    }
}
에서 상단 두개를 주석처리하는 이유는 MyNumberFormatter에서 숫자와 문자를 바꿔주는것과 같기때문에 우선순위적용으로 인해 바꿔주는

9. 스프링이 제공하는 기본 포맷터
    @Data
    static class Form {
        @NumberFormat(pattern = "###,###")
        private Integer number;

        @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        private LocalDateTime localDateTime;
    }
  -. 과 같이 어노테이션으로 내가 원하는 형식으로 지정해서 받을수 있다.
  -. @NumberFormat(pattern = "###,###") 으로 하면 객체를 넘길경우 출력할때 컨버터 적용문법 사용시 자동으로 해당 패턴으로 적용되어 표출된다.
    @PostMapping("/formatter/edit")
    public String formatterEdit(@ModelAttribute Form form) {
        return "formatter-view";
    }
    와 같이 할 경우 @ModelAttribute를 사용할경우 받은것을 자동으로 model.addattribute가 적용되어 전달된다.
