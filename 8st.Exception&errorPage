1. 서블릿예외처리 시작
  자바 직접 실행
  자바의 메인 메서드를 직접 실행하는 경우 main 이라는 이름의 쓰레드가 실행된다.
  실행 도중에 예외를 잡지 못하고 처음 실행한 main() 메서드를 넘어서 예외가 던져지면, 예외 정보를 남기고 해당 쓰
  레드는 종료된다.
  웹 애플리케이션
  웹 애플리케이션은 사용자 요청별로 별도의 쓰레드가 할당되고, 서블릿 컨테이너 안에서 실행된다.
  애플리케이션에서 예외가 발생했는데, 어디선가 try ~ catch로 예외를 잡아서 처리하면 아무런 문제가 없다. 그런데 만
  약에 애플리케이션에서 예외를 잡지 못하고, 서블릿 밖으로 까지 예외가 전달되면 어떻게 동작할까?

  WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생) ```
  결국 톰캣 같은 WAS 까지 예외가 전달된다. WAS는 예외가 올라오면 어떻게 처리해야 할까?

 -. response.sendError() 를 호출하면 response 내부에는 오류가 발생했다는 상태를 저장해둔다.
    그리고 서블릿 컨테이너는 고객에게 응답 전에 response 에 sendError() 가 호출되었는지 확인한다. 그리고 호출
    되었다면 설정한 오류 코드에 맞추어 기본 오류 페이지를 보여준다

 -. 서블릿에서는 컨트롤러에서 예외가 터지면 500error 이 터지고(서버에러) , sendError이 터지면 respons에 있는 sendError를 열어서 해당 에러를 반영한다.


2. 예외처리
     @GetMapping("/error-ex")
    public void errorEx() {
        throw new RuntimeException("예외 발생!");
    }

    @GetMapping("/error-404")
    public void error404(HttpServletResponse response) throws IOException {
        response.sendError(404, "404 오류!");
    }

으로 오륙 터진다면, WAS에서는 어느 페이지를 보여줄지 WAS에 등록된곳에서 확인한다. 그중에
@Component
public class WebServerCustomizer implements WebServerFactoryCustomizer<ConfigurableWebServerFactory> {
    @Override
    public void customize(ConfigurableWebServerFactory factory) {

        ErrorPage errorPage404 = new ErrorPage(HttpStatus.NOT_FOUND, "/error-page/404");
        ErrorPage errorPage500 = new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, "/error-page/500");

        ErrorPage errorPageEx = new ErrorPage(RuntimeException.class, "/error-page/500");

        factory.addErrorPages(errorPage404, errorPage500, errorPageEx);
    }
}

위와 같은 코드가 있어서 "/error-page/404" 경로 요청이 오고 컨트롤러에 있는지 확인한다. 

    @RequestMapping("/error-page/404")
    public String errorPage404(HttpServletRequest request, HttpServletResponse response) {
        log.info("errorPage 404");
        printErrorInfo(request);
        return "error-page/404";
    }

    와 같은 코드가 있어 해당페이지로 이동한다.

3. 에러페이지 작동원리
 -. 서블릿은 Exception (예외)가 발생해서 서블릿 밖으로 전달되거나 또는 response.sendError() 가 호출 되었을 때 설정된 오류 페이지를 찾는다.
    예외 발생 흐름 
    WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생) 
    sendError 흐름 
    WAS(sendError 호출 기록 확인) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러
    (response.sendError())


WAS는 해당 예외를 처리하는 오류 페이지 정보를 확인한다.
  new ErrorPage(RuntimeException.class, "/error-page/500") 예를 들어서 RuntimeException 예외가 WAS까지 전달되면, WAS는 오류 페이지 정보를 확인한다. 확인해보니
  RuntimeException 의 오류 페이지로 /error-page/500 이 지정되어 있다. WAS는 오류 페이지를 출력하기 위해 /error-page/500 를 다시 요청한다. 

오류 페이지 요청 흐름 
  WAS `/error-page/500` 다시 요청 -> 필터 -> 서블릿 -> 인터셉터 -> 컨트롤러(/error-page/500)  -> View

예외 발생과 오류 페이지 요청 흐름 
  1. WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)
  2. WAS `/error-page/500` 다시 요청 -> 필터 -> 서블릿 -> 인터셉터 -> 컨트롤러(/error-page/500) -> View

중요한 점은 웹 브라우저(클라이언트)는 서버 내부에서 이런 일이 일어나는지 전혀 모른다는 점이다. 오직 서버 내부에서 오류 페이지를 찾기 위해 추가적인 호출을 한다


4. 서블릿 예외처리 필터
  1. WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)
  2. WAS `/error-page/500` 다시 요청 -> 필터 -> 서블릿 -> 인터셉터 -> 컨트롤러(/error-page/500) -> View
    -. 필터 인터셉터, 서블릿은 에러페이지 발동시 다시 한번 실행될수 있다.
    -. 

  @Configuration
  public class WebConfig implements WebMvcConfigurer {
   @Bean
   public FilterRegistrationBean logFilter() {
   FilterRegistrationBean<Filter> filterRegistrationBean = new
  FilterRegistrationBean<>();
   filterRegistrationBean.setFilter(new LogFilter());
   filterRegistrationBean.setOrder(1);
   filterRegistrationBean.addUrlPatterns("/*");
       filterRegistrationBean.setDispatcherTypes(DispatcherType.REQUEST,  DispatcherType.ERROR);   --> 기본은 request라서 error를 넣어줘야 한다.
   return filterRegistrationBean;
   }
  }

전체적인 흐름은 아래와 같다.
/error-ex 오류 요청
필터는 DispatchType 으로 중복 호출 제거 ( dispatchType=REQUEST )
인터셉터는 경로 정보로 중복 호출 제거( excludePathPatterns("/error-page/**") )

1. WAS(/error-ex, dispatchType=REQUEST) -> 필터 -> 서블릿 -> 인터셉터 -> 컨트롤러
2. WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)
3. WAS 오류 페이지 확인
4. WAS(/error-page/500, dispatchType=ERROR) -> 필터(x) -> 서블릿 -> 인터셉터(x) -> 컨트롤러(/error-page/500) -> View


5. errorPage 우선순위

  뷰 선택 우선순위
  BasicErrorController 의 처리 순서

  1. 뷰 템플릿
  resources/templates/error/500.html
  resources/templates/error/5xx.html
  2. 정적 리소스( static , public )
  resources/static/error/400.html
  resources/static/error/404.html
  resources/static/error/4xx.html
  3. 적용 대상이 없을 때 뷰 이름( error )
  resources/templates/error.html

6. errorpage
등록한 오류 페이지
resources/templates/error/4xx.html
resources/templates/error/404.html
resources/templates/error/500.html
테스트
http://localhost:8080/error-404 404.html
http://localhost:8080/error-400 4xx.html (400 오류 페이지가 없지만 4xx가 있음)
http://localhost:8080/error-500 500.html
http://localhost:8080/error-ex 500.html (예외는 500으로 처리)


  
