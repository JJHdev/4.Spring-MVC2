1. 검증 직접처리 - 개발
  -. 컨트롤러에서 map에 데이터를 넣어서 div로 표출
  -. errors?.containsKey('globalError')  ?. 을 넣은 이유는 뭘까? errors는 맨처음 접근시 (폼호출 errors 객체가 없어 null이 되어 nullpointexception이 발생한다.)

    -- 컨트롤러 
        Map<String, String> errors = new HashMap<>();

        //검증 로직
        if (!StringUtils.hasText(item.getItemName())) {
            errors.put("itemName", "상품 이름은 필수입니다.");
        }

    -- thymeleaf
    <div th:if="${errors?.containsKey('globalError')}">
        <p class="field-error" th:text="${errors['globalError']}">전체 오류 메시지</p>
    </div>

    <div>
        <label for="itemName" th:text="#{label.item.itemName}">상품명</label>
        <input type="text" id="itemName" th:field="*{itemName}"
               th:class="${errors?.containsKey('itemName')} ? 'form-control field-error' : 'form-control'"
               class="form-control" placeholder="이름을 입력하세요">
        <div class="field-error" th:if="${errors?.containsKey('itemName')}" th:text="${errors['itemName']}">
            상품명 오류
        </div>
    </div>

2. BindingResult1
  -. 여기에서 핵심은 BindingResult bindingResult 이 파라미터이다.
  -. bindingResult.addError(new FieldError("item", "itemName", "상품 이름은 필수 입니다."));
  -. bindingResult.addError(new ObjectError("item", "가격 * 수량의 합은 10,000원 이상이어야 합니다. 현재 값 = " + resultPrice));

  -. @ModelAttribute Item item, BindingResult bindingResult 에서 bindingResult객체는 @ModelAttribute Item item와 같이 modelAttribute객체 앞에 있어야 앞에 있는 객체를 활용한다.
  -. 

  public String addItemV1(@ModelAttribute Item item, BindingResult bindingResult, RedirectAttributes redirectAttributes, Model model) {
        if (!StringUtils.hasText(item.getItemName())) {
            bindingResult.addError(new FieldError("item", "itemName", "상품 이름은 필수 입니다."));
        }

        //특정 필드가 아닌 복합 룰 검증 (글로벌 에러)
        if (item.getPrice() != null && item.getQuantity() != null) {
            int resultPrice = item.getPrice() * item.getQuantity();
            if (resultPrice < 10000) {
                bindingResult.addError(new ObjectError("item", "가격 * 수량의 합은 10,000원 이상이어야 합니다. 현재 값 = " + resultPrice));
            }
        }
  }

3. BindingResult2
  -. 

4. FiledError, ObjectError
  -. 

5. 오류코드와 메시지 처리1
  -. 

10. 오류코드와 메시지 처리2
  -. 

11. 오류코드와 메시지 처리3
  -. 

12. 오류코드와 메시지 처리4
  -. 

13. 오류코드와 메시지 처리5
  -. 

14. 오류코드와 메시지 처리6
  -. 

15. validator 분리1
  -. 

16. validator 분리2
  -. 





















