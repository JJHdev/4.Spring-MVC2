1. 타임리프 소개 
  -. 서버사이드 HTML 렌더링 SSR
    -. 백엔드 서버에서 HTML을 동적으로 렌더링 하는 용도로 사용된다.
  -. 네츄럴 템플릿
  -. 스프링 통합지원

2. 텍스트 -text, utext
  -. th:text="${data}"
  -. 컨텐츠 안에서 직접 출력하기 = [[${data}]]

  -. Escape은 < , > 같은 특수 문자를 기반으로 정의된다. 따라서 뷰 템플릿으로 HTML 화면을 생성할 떄는 출력하는 데이터에 이러한 특수 문자가 있는 것을 주의해서 사용해야한다.
  -. <B> .같은경우는 소스보기에서 &lt;b&gt 같이 나올것이다.  웹브라우저는 HTML의 시작을 < 으로 알아서 발생한 현상이다.
 
  -. [[${data}]] 이것은 기본적으로 이스케이프를 제공한다. 그래서 우리가 원하는 기능이 잘 표현되지 않는데 만약에 html태그로서의 기능을 표현하기위해 이스케이프를 처리하지 않을려면 어떻게해야할까??(unescape)
  -. th:utext={"data"}
  -. [({$data})]

3. 변수 - SpringEl
    Object
    <li>${user.username} =    <span th:text="${user.username}"></span></li>
    <li>${user['username']} = <span th:text="${user['username']}"></span></li>
    <li>${user.getUsername()} = <span th:text="${user.getUsername()}"></span></li>

    List
    <li>${users[0].username}    = <span th:text="${users[0].username}"></span></li>
    <li>${users[0]['username']} = <span th:text="${users[0]['username']}"></span></li>
    <li>${users[0].getUsername()} = <span th:text="${users[0].getUsername()}"></span></li>

    Map
    <li>${userMap['userA'].username} =  <span th:text="${userMap['userA'].username}"></span></li>
    <li>${userMap['userA']['username']} = <span th:text="${userMap['userA']['username']}"></span></li>
    <li>${userMap['userA'].getUsername()} = <span th:text="${userMap['userA'].getUsername()}"></span></li>


4. 기본 객체들
  -. 타임리프는 기본 객체들을 제공한다
    -> ${#request}
      -. org.apache.catalina.connector.RequestFacade@81e3e2e
    -> ${#response}
      -. org.apache.catalina.connector.ResponseFacade@7fc7f06f
    -> ${#session}
      -. org.apache.catalina.session.StandardSessionFacade@3963e4a1
    -> ${#servletContext}
      -. org.apache.catalina.core.ApplicationContextFacade@6206a81e
    -> ${#locale}
      -. ko

    -. 편의객체
    <li>Request Parameter = <span th:text="${param.paramData}"></span></li>
    <li>session = <span th:text="${session.sessionData}"></span></li>
    <li>spring bean = <span th:text="${@helloBean.hello('Spring!')}"></span></li>


5. 유틸리티 객체와 날짜
  -.  날짜 및 다양한 객체지원함수가 많다. (message, urls, dates, claendars, numbers, Strings, objects 등등)
    <li>default = <span th:text="${localDateTime}"></span></li>
    <li>yyyy-MM-dd HH:mm:ss = <span th:text="${#temporals.format(localDateTime, 'yyyy-MM-dd HH:mm:ss')}"></span></li>
    <li>${#temporals.day(localDateTime)} = <span th:text="${#temporals.day(localDateTime)}"></span></li>
    <li>${#temporals.month(localDateTime)} = <span th:text="${#temporals.month(localDateTime)}"></span></li>
    <li>${#temporals.monthName(localDateTime)} = <span th:text="${#temporals.monthName(localDateTime)}"></span></li>
    <li>${#temporals.monthNameShort(localDateTime)} = <span th:text="${#temporals.monthNameShort(localDateTime)}"></span></li>
    <li>${#temporals.year(localDateTime)} = <span th:text="${#temporals.year(localDateTime)}"></span></li>
    <li>${#temporals.dayOfWeek(localDateTime)} = <span th:text="${#temporals.dayOfWeek(localDateTime)}"></span></li>
    <li>${#temporals.dayOfWeekName(localDateTime)} = <span th:text="${#temporals.dayOfWeekName(localDateTime)}"></span></li>
    <li>${#temporals.dayOfWeekNameShort(localDateTime)} = <span th:text="${#temporals.dayOfWeekNameShort(localDateTime)}"></span></li>
    <li>${#temporals.hour(localDateTime)} = <span th:text="${#temporals.hour(localDateTime)}"></span></li>
    <li>${#temporals.minute(localDateTime)} = <span th:text="${#temporals.minute(localDateTime)}"></span></li>
    <li>${#temporals.second(localDateTime)} = <span th:text="${#temporals.second(localDateTime)}"></span></li>
    <li>${#temporals.nanosecond(localDateTime)} = <span th:text="${#temporals.nanosecond(localDateTime)}"></span></li>

6. URL 링크
  -. URL 링크(서버에서 받은 데이터로 다양하게 표현이 가능하다.)
    <li><a th:href="@{/hello}">basic url</a></li>
    <li><a th:href="@{/hello(param1=${param1}, param2=${param2})}">hello query param</a></li>
    <li><a th:href="@{/hello/{param1}/{param2}(param1=${param1}, param2=${param2})}">path variable</a></li>
    <li><a th:href="@{/hello/{param1}(param1=${param1}, param2=${param2})}">path variable + query parameter</a></li>

7. 리터럴
  -. ='문자'("'입력된문자'"), =숫자, =boolean(true,false), =null
  -. |리터럴 대체문법 ${data}| 시 사용가능(+ 가 없어도 된다.)

7. 연산
    <li>10 + 2 = <span th:text="10 + 2"></span></li>
    <li>10 % 2 == 0 = <span th:text="10 % 2 == 0"></span></li>
    <li>1 > 10 = <span th:text="1 &gt; 10"></span></li>
    <li>1 gt 10 = <span th:text="1 gt 10"></span></li>
    <li>1 >= 10 = <span th:text="1 >= 10"></span></li>
    <li>1 ge 10 = <span th:text="1 ge 10"></span></li>
    <li>1 == 1 = <span th:text="1 == 10"></span></li>
    <li>(10 % 2 == 0)? '짝수':'홀수' = <span th:text="(10 % 2 == 0)? '짝수':'홀수'"></span></li>
    <li>${data}?: '데이터가 없습니다.' = <span th:text="${data}?: '데이터가 없습니다.'"></span></li>
    <li>${nullData}?: '데이터가 없습니다.' = <span th:text="${nullData}?: '데이터가 없습니다.'"></span></li>

    -> null일경우 그냥 무효화가 된다.
    <li>${data}?: _ = <span th:text="${data}?: _">데이터가 없습니다.</span></li>
    <li>${nullData}?: _ = <span th:text="${nullData}?: _">데이터가 없습니다.</span></li>

8. 속성 값 설정
  -. 
<input type="text" name="mock" th:name="userA" />

<h1>속성 추가</h1>
- th:attrappend = <input type="text" class="text" th:attrappend="class=' large'" /><br/>
- th:attrprepend = <input type="text" class="text" th:attrprepend="class='large '" /><br/>
- th:classappend = <input type="text" class="text" th:classappend="large" /><br/>

<h1>checked 처리</h1>
- checked o <input type="checkbox" name="active" th:checked="true" /><br/>
- checked x <input type="checkbox" name="active" th:checked="false" /><br/>
- checked=false <input type="checkbox" name="active" checked="false" /><br/>  -->> 무조건 체크되어있어서 th를 만들었다.

9. 반복
  -. 

10. 조건부 평가

11. 주석

12. 블록

13. 자바스크립트 인라인

14. 템플릿조각

15. 템플릿 레이아웃1

16. 템플릿 레이아웃2

17. 정리
