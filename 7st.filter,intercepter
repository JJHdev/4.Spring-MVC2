1. 서블릿 필터 - 소개
  -. 로그인시 모든 컨트롤러에 로그인이 되어있는지 체크하는 코드가 필요해지고 관리하기 힘들어진다. 즉 공통관심사에 대해서 관리하기가 어려워진다.
  -. 그래서 공통관심사는 서블릿 필터나, 스프링 인터셉터를 사용하는것 좋다.

  -. 서블릿필터는 서블릿이 지원하는 필터링역할을한다. (HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러)
  -. 필터체인 HTTP요청 -> WAS -> 필터1 -> 필터2 -> 필터3 -> 서블릿 -> 컨트롤러
  
2. 서블릿 필터 - 요청로그
public class LogFilter implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        log.info("log filter init");
    }
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        log.info("log filter doFilter");
        try {
            log.info("REQUEST [{}][{}]", uuid, requestURI);
            chain.doFilter(request, response);
        } catch (Exception e) {
            throw e;
        } finally {
            log.info("RESPONSE [{}][{}]", uuid, requestURI);
        }
    }
    @Override
    public void destroy() {
        log.info("log filter destroy");
    }
}
 -> 내가 만든 필터는 위와 같이 만들수 있는데 이것을 등록해야한다 등록하는 방식은 
@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Bean
    public FilterRegistrationBean logFilter() {
        FilterRegistrationBean<Filter> filterRegistrationBean = new FilterRegistrationBean<>();
        filterRegistrationBean.setFilter(new LogFilter());
        filterRegistrationBean.setOrder(1);
        filterRegistrationBean.addUrlPatterns("/*");

        return filterRegistrationBean;
    }
    위와같이 FilterRegistrationBean에 등록해야한다.

  -. 아래와 같은 코드에서 chain.doFilter은 다음 로직을 이어간다는 뜻이다. > 서블릿 > 컨트롤러 이 다 끝나고 나면 finally로 간다.
          try {
            log.info("REQUEST [{}][{}]", uuid, requestURI);
            chain.doFilter(request, response);
        } catch (Exception e) {
            throw e;
        } finally {
            log.info("RESPONSE [{}][{}]", uuid, requestURI);
        }

3. 서블릿 필터 - 인증체크
-.            
  if (isLoginCheckPath(requestURI)) {
      log.info("인증 체크 로직 실행 {}", requestURI);
      HttpSession session = httpRequest.getSession(false);
      if (session == null || session.getAttribute(SessionConst.LOGIN_MEMBER) == null) {

          log.info("미인증 사용자 요청 {}", requestURI);
          //로그인으로 redirect
          httpResponse.sendRedirect("/login?redirectURL=" + requestURI);
          return;
      }
  }
    -> httpResponse.sendRedirect("/login?redirectURL=" + requestURI);
       이코드는 로그인 되면 다시 수행했던 페이지로 이동하게 만들도록 하는 코드이다.
      -. @RequestParam(defaultValue = "/") String redirectURL URL 받
      -. return "redirect:" + redirectURL; URL 경로 지정해서 새로 로그인해도 이동가능하도록 만들기

  -> 

4. 스프링 인터셉터 - 소개
  -. HTTP 요청 -> WAS -> 필터 -> 서블릿(디스패처서블릿) -> 스프링 인터셉터 -> 컨트롤러
  -. 적절하지 않은 요청은 컨트롤러 호출하지 않을수 있다.
  -. 스프링 인터셉터는 필터와 비슷해보이지만, 더 정교하고 다양한 기능을 도와준다.
  -. 디스패처서블릿 -> preHandle -> 핸들러 어탭터 -> 핸들러 -> 디스패처서블릿 -> postHandler -> View (render) -> apfterCompletion -> HTML 응답
  -. 컨트롤러에서 예외가 발생할 경우 postHandelr은 호출이 안되지만, afterCompletion은 호출된다. (ex파라미터로 예외를 받을수 있다.)

5. 스프링 인터셉터 - 요청 로그
  -. 싱글톤으로 생성되어 전역변수는 될수있으면 생성안하는게 좋다. (상수만 사용)
  -. RequestMapping 같은 컨트롤러 메소드는 instaceof HandlerMethod로 구분할수있다.
  -. 정적리소스 : instaceof ResourceHttpRequestHandelr로 구분할수있다.

  -. 아래와 같은 방식으로 인터셉터를 등록할수 있다.
    -. public class LogInterceptor implements HandlerInterceptor {} 로 상속받아서 사용가능하다. (override에 메소드 사용하면된다.)
@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new LogInterceptor())
                .order(1)
                .addPathPatterns("/**")
                .excludePathPatterns("/css/**", "/*.ico", "/error");

        registry.addInterceptor(new LoginCheckInterceptor())
                .order(2)
                .addPathPatterns("/**")
                .excludePathPatterns("/", "/members/add", "/login", "/logout",
                        "/css/**", "/*.ico", "/error");
    }

7. ArgumentResolver 활용
  -. 어노테이션으로 파라미터에서 받을때 해당 파라미터에서 특정 조건(세션이있을경우 파라미터를 무조건 null or 있을경우 해당 세션의 특정파라미터를 받도록
     설정 할수 있다..)
