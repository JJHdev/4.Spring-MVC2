1. 파일 업로드
  -. 파일을 업로드 할려면 파일은 문자가 아니라 바이너리 데이터를 전송해야한다.  multipart/form-data  는 바이너리 데이터로 전송할수있도록 해주는것이다.
  -. 이럴때 이름과 나이, 파일까지 전송해야 할때 두가지 데이터 타입을 전송해야하는데 multipart/form-data 는 두가지 데이터 타입을 전송하게 해준다. (input에서 file타입일 경우 바이너리 데이터로 전송)
  
  -. application/x-www-form-urlencoded
    -> HTML Form 데이터 전송 (input에서 지정한 name을 키값으로 value를 값으로 보낸다. 
    
  -. multipart/form-data 

2. 서블릿과 파일업로드1
  -.    String itemName = request.getParameter("itemName");
        log.info("itemName={}", itemName);
        Collection<Part> parts = request.getParts();
        log.info("parts={}", parts);
  -.  같이 할경우 reqeust.getPart에서 파일과 데이터 객체가 담겨서 오는것을 확인할수 있다. (멀티파트 데이터를 읽어온다.)
  -. mutipart에는 몇가지 기능이 있는데 (업로드사이즈 제한할수있다.)

3. 서블릿과 파일업로드2
  -. file.dir=/Users/kimyounghan/study/file/ (app.properties)에 입력 파일 경로 (마지막에 /가 있어야 한다.)
  -. java에서는 
    @Value("${file.dir}")
    private String fileDir; 으로 가져올수있다.


파일 저장방법은아래와 같다
    Collection<Part> parts = request.getParts();
    log.info("parts={}", parts);
    
    for (Part part : parts) {
        log.info("==== PART ====");
        log.info("name={}", part.getName());
        Collection<String> headerNames = part.getHeaderNames();
        for (String headerName : headerNames) {
            log.info("header {}: {}", headerName, part.getHeader(headerName));
        }
        //편의 메서드
        //content-disposition; filename
        log.info("submittedFilename={}", part.getSubmittedFileName());
        log.info("size={}", part.getSize()); //part body size
    
        //데이터 읽기
        InputStream inputStream = part.getInputStream();
        String body = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
        log.info("body={}", body);
    
        //파일에 저장하기
        if (StringUtils.hasText(part.getSubmittedFileName())) {
            String fullPath = fileDir + part.getSubmittedFileName();
            log.info("파일 저장 fullPath={}", fullPath);
            part.write(fullPath);
        }
    }


4. 스프링 파일 업로드
@PostMapping("/upload")
    public String saveFile(@RequestParam String itemName,
                           @RequestParam MultipartFile file, HttpServletRequest request) throws IOException {

        log.info("request={}", request);
        log.info("itemName={}", itemName);
        log.info("multipartFile={}", file);

        if (!file.isEmpty()) {
            String fullPath = fileDir + file.getOriginalFilename();
            log.info("파일 저장 fullPath={}", fullPath);
            file.transferTo(new File(fullPath));
        }

        return "upload-form";
    }
위와 같이 어노테이션으로 file을 받아서 사용할수 있다.

5. 파일 업로드. 파일 다운로드
  -. 파일을 받는 DTO를 만들것
@Data
public class ItemForm {

    private Long itemId;
    private String itemName;
    private MultipartFile attachFile;
    private List<MultipartFile> imageFiles;
}

@Data
public class Item {

    private Long id;
    private String itemName;
    private UploadFile attachFile;
    private List<UploadFile> imageFiles;
}

  -. 이미지는 여러개 받을것이라서, List로 했음, Item은 파일 저장시 사용할 DTO임 (UploadFile은 파일의 저장이름과 실제 이름으로 선언되어있음)
  파일 관련 컴포넌트 설정은 아래와 같이 설정해서 사용하기 편하도록 작업함
package hello.upload.file;

import hello.upload.domain.UploadFile;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Component
public class FileStore {

    @Value("${file.dir}")
    private String fileDir;

    public String getFullPath(String filename) {
        return fileDir + filename;
    }

    public List<UploadFile> storeFiles(List<MultipartFile> multipartFiles) throws IOException {
        List<UploadFile> storeFileResult = new ArrayList<>();
        for (MultipartFile multipartFile : multipartFiles) {
            if (!multipartFile.isEmpty()) {
                storeFileResult.add(storeFile(multipartFile));
            }
        }
        return storeFileResult;
    }

    public UploadFile storeFile(MultipartFile multipartFile) throws IOException {
        if (multipartFile.isEmpty()) {
            return null;
        }

        String originalFilename = multipartFile.getOriginalFilename();
        String storeFileName = createStoreFileName(originalFilename);
        multipartFile.transferTo(new File(getFullPath(storeFileName)));
        return new UploadFile(originalFilename, storeFileName);
    }

    private String createStoreFileName(String originalFilename) {
        String ext = extractExt(originalFilename);
        String uuid = UUID.randomUUID().toString();
        return uuid + "." + ext;
    }

    private String extractExt(String originalFilename) {
        int pos = originalFilename.lastIndexOf(".");
        return originalFilename.substring(pos + 1);
    }


}

  -. 이미지 파일을 불러오기 위해
    -. html
      <img th:each="imageFile : ${item.imageFiles}" th:src="|/images/${imageFile.getStoreFileName()}|" width="300" height="300"/>
   
    -. controller
      @ResponseBody
      @GetMapping("/images/{filename}")
      public Resource downloadImage(@PathVariable String filename) throws MalformedURLException {
          return new UrlResource("file:" + fileStore.getFullPath(filename));
      }
    -> 만약에 img태그에서 src속성중 경로가 컨트롤러에 있을 경우 컨트롤러에서 해당 이미지를 불러오고 없을 경우 정적 리소스에서 찾는다.
    -> 컨트롤러로 갔을 경우 file:로 하면 외부에서 찾게 하고, classpath: 로 할경우 프로젝트 내부에서 찾게 한다.

  -. 파일 다운로드
    -. html
      첨부파일: <a th:if="${item.attachFile}" th:href="|/attach/${item.id}|" th:text="${item.getAttachFile().getUploadFileName()}" /><br/>

    -. controller
      @GetMapping("/attach/{itemId}")
      public ResponseEntity<Resource> downloadAttach(@PathVariable Long itemId) throws MalformedURLException {
          Item item = itemRepository.findById(itemId);
          String storeFileName = item.getAttachFile().getStoreFileName();
          String uploadFileName = item.getAttachFile().getUploadFileName();
  
          UrlResource resource = new UrlResource("file:" + fileStore.getFullPath(storeFileName));
  
          log.info("uploadFileName={}", uploadFileName);
  
          String encodedUploadFileName = UriUtils.encode(uploadFileName, StandardCharsets.UTF_8);
          String contentDisposition = "attachment; filename=\"" + encodedUploadFileName + "\"";
  
          return ResponseEntity.ok()
                  .header(HttpHeaders.CONTENT_DISPOSITION, contentDisposition)
                  .body(resource);
      }
    -> header에 .header(HttpHeaders.CONTENT_DISPOSITION, contentDisposition) 가 없을 경우 파일 다운로드시 안에 내용만 브라우저에 표출된다. 그래서 @ResponseBody를 사용안한것 (header를 셋팅하기위해)
    -> response에 content-Disposition: attachment; filename="b.txt" 로 넘어가면 브라우저에 다운로드를 하라 (attachment) 파일이름은 (filename) 으로 지정하게 해준다.
    -> content-Disposition에는 inline을 넣을수 있는데 이것은 브라우저에 이미지 표출 명령이다. (image , pdf)
    -> 한글 파일명은 깨질수 있어서 String encodedUploadFileName = UriUtils.encode(uploadFileName, StandardCharsets.UTF_8); 으로 인코딩 다시한번 지정해준다.(서버설정은 각 환경마다 다르므로)



